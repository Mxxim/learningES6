{"version":3,"sources":["../../src/Array/demo1.es6"],"names":[],"mappings":"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","file":"demo1.js","sourcesContent":["/**\r\n *   Created by sammy on 2016/7/5\r\n */\r\n'use strict';\r\n\r\n/**\r\n * Array的扩展\r\n * */\r\n\r\n// Array.from()：将两类对象（类似数组的对象或可遍历的对象）转为真正的数组。\r\n// 第二个参数用来对每个元素进行处理，类似数组的 map 方法。\r\n// 第三个参数用来绑定 this\r\nlet arrayLike = {\r\n    '0': 'a',\r\n    '1': 'b',\r\n    '2': 'c',\r\n    length: 3\r\n};\r\n\r\nvar arr1 = [].slice.call(arrayLike); // ES5的写法\r\nconsole.log(arr1); // ['a', 'b', 'c']\r\n\r\nlet arr2 = Array.from(arrayLike);   // ES6的写法\r\nconsole.log(arr2); // ['a', 'b', 'c']\r\n\r\n// 将类数组对象或函数内部的arguments对象转换为真正的数组\r\n//let ps = document.querySelectorAll('p'); // NodeList对象\r\n//Array.from(ps).forEach(function(p){     // Array.from()将其转换为真正的数组\r\n//    console.log(p);\r\n//})\r\nArray.from('Sammy').forEach(function(s){\r\n    console.log(s); // ['S','a','m','m','y']\r\n});\r\n\r\nlet mp = new Map();\r\nmp.set(\"key1\",\"value1\");\r\nmp.set(\"key2\",\"value2\");\r\nArray.from(mp).forEach(function(data){\r\n    console.log(data); // ['key1','value1'] 和 ['key2','value2']\r\n})\r\n\r\nfunction foo(){\r\n    console.log(arguments); // { '0': 'hello', '1': 'world' }\r\n    console.log(arguments.length); // 2\r\n    Array.from(arguments).forEach(function(a){\r\n        console.log(a); // ['hello','world']\r\n        Array.from(a).forEach(function(b){\r\n            console.log(b);\r\n        })\r\n    })\r\n}\r\nfoo(\"hello\",\"world\");\r\n\r\nArray.from({length:3}).forEach(function(s){\r\n    console.log(s); // [undefined,undefined,undefined]\r\n});\r\n\r\n// 传入第二个参数\r\nlet arr3 = Array.from([1,,3,,5] , x => x || 0);\r\nconsole.log(arr3); // [1,0,3,0,5]\r\nlet arr4 = Array.from({length:2} , () => \"Mxxim\");\r\nconsole.log(arr4); // ['Mxxim','Mxxim']\r\n\r\n// Array.of()：将一组值转换为数组，若没有参数，则返回一个空数组。用来代替 Array() 和 new Array()\r\nlet arr5 = Array.of(3);\r\nconsole.log(arr5); // [3]\r\nconsole.log(arr5.length); // 1\r\n\r\n// copyWithin(target,start,end)：在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。\r\n// target（必需），从该位置开始替换数据。\r\n// start（可选），从该位置开始读取数据，默认为0。如果为负值，表示倒数。\r\n// end（可选），到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。\r\n\r\n// find(callback(value,index,arr))：找出第一个符合条件的数组成员。\r\n// findIndex(callback(value,index,arr))：返回第一个符合条件的数组成员的位置，若所有成员都不符合，则返回-1.\r\n// 这两个方法都可以发现NaN，弥补了数组的 IndexOf 方法的不足。\r\nvar c = [1,-1,8,-2].find(function(value,index,arr){\r\n    return value < 0;\r\n});\r\nconsole.log(c); // -1\r\n\r\nconsole.log([NaN,5].indexOf(NaN)); // -1\r\nconsole.log([NaN,5].findIndex(y => Object.is(NaN,y))); // 0\r\n\r\n// fill()：使用给定值，填充一个数组。可以用来初始化一个数组。\r\nvar arr6 = Array.from({length:3}).fill(5);\r\nconsole.log(arr6); // [5,5,5]\r\nvar arr7 = ['a', 'b', 'c'].fill(7, 1, 2); // fill()从1号位开始，向原数组填充7，到2号位之前结束。\r\nconsole.log(arr7); // [ 'a', 7, 'c' ]\r\n\r\n// entries():对键值对的遍历\r\n// keys()：对键名的遍历\r\n// values()：对键值的遍历\r\nfor(let elem of [\"a\",\"b\"].keys()){\r\n    console.log(elem); // 0 1\r\n}\r\n//for (let elem of ['a', 'b'].values()) {\r\n//    console.log(elem);\r\n//} // node v6.0会报错\r\nfor(let elem of [\"a\",\"b\"].entries()){\r\n    console.log(elem); // [ 0, 'a' ] / [ 1, 'b' ]\r\n}\r\nfor(let [index,item] of [\"a\",\"b\"].entries()){\r\n    console.log(index,item); // 0, 'a' /  1, 'b'\r\n}\r\n\r\n// includes()：表示某个数组是否包含给定的值，与字符串的includes方法类似\r\nconsole.log([NaN].indexOf(NaN)); // -1\r\nconsole.log([NaN].includes(NaN)); // true\r\n\r\n// ES6明确将空位转为 undefined，不会跳过空位\r\n\r\n"]}