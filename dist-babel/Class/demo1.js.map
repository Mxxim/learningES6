{"version":3,"sources":["../../src/Class/demo1.es6"],"names":[],"mappings":"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","file":"demo1.js","sourcesContent":["/**\r\n *   Created by sammy on 2016/7/12\r\n */\r\n'use strict';\r\n\r\n/**\r\n * Class（类）：类的数据类型就是function（函数），类本身就指向构造函数。使用 new 来实例一个对象。\r\n * 类的内部所有定义的方法，都是定义在prototype属性上的并且不可枚举的。\r\n * 与ES5一样，类的所有实例共享一个原型对象。\r\n * */\r\n// ES5\r\nfunction PointES5(x,y){\r\n    this.x = x;\r\n    this.y = y;\r\n}\r\nPointES5.prototype.toString = function(){\r\n    return '(' + this.x + ', ' + this.y + ')';\r\n}\r\nvar p = new PointES5(1, 2);\r\nconsole.log(p.toString());  // (1, 2)\r\n\r\n// ES6\r\n// 事实上，类的所有方法都定义在类的 prototype 属性上面。\r\nvar methodName = \"getLength\";\r\nclass PointES6{\r\n    constructor(x,y){   // 构造方法。this 代表实例对象\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    toString(){\r\n        return '(' + this.x + ', ' + this.y + ')';\r\n    }\r\n\r\n    [methodName](){\r\n        return this.x + this.y;\r\n    }\r\n}\r\nvar pointes6 = new PointES6(1,2);\r\n\r\nconsole.log(pointes6.toString()); // (1, 2)\r\nconsole.log(pointes6.getLength());  // 3\r\nconsole.log(typeof PointES6);   // function\r\nconsole.log(PointES6 === PointES6.prototype.constructor);   // true\r\nconsole.log(pointes6.toString  === PointES6.prototype.toString); // true\r\nconsole.log(Object.keys(PointES6.prototype));   // []\r\nconsole.log(Reflect.ownKeys(PointES6.prototype));   // [ 'constructor', 'toString' ]\r\nconsole.log(pointes6.hasOwnProperty('x'));  // true\r\nconsole.log(pointes6.hasOwnProperty('toString'));   // false。该方法是在原型上而不是实例上\r\nconsole.log(pointes6.__proto__.hasOwnProperty('toString'));   // true。说明通过 __proto__ 属性可以为Class添加方法。\r\n\r\n// 使用 Object.assign()给类一次性添加多个方法\r\n\r\n/**\r\n * 使用表达式定义 Class\r\n * */\r\n// 类的名字是 myClass 而不是 Me，Me只是在类的内部中使用。\r\nconst myClass = class Me{\r\n    getClassName(){\r\n        return Me.name;\r\n    }\r\n};\r\nlet inst = new myClass();\r\n\r\nconsole.log(inst.getClassName());   // Me\r\n//console.log(Me.name);   // Me is not defined\r\nconsole.log(myClass.name);   // Me\r\n\r\n// 立即执行\r\nvar person = new class{\r\n    constructor(name){\r\n        this.name = name;\r\n    }\r\n\r\n    sayName(){\r\n        console.log(this.name);\r\n    }\r\n}('张三');\r\n\r\nperson.sayName(); // 张三\r\n\r\n/**\r\n * Class的继承，子类必须在 constructor 方法中调用 super 方法，否则实例化的时候会报错，因为子类没有自己的 this 对象，\r\n * 而是继承父类的 this 对象，然后对其进行加工，如果不调用 super 方法，子类就得不到 this 对象。\r\n * */\r\nclass Point{\r\n    constructor(x,y){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    toString(){\r\n        return '('+this.x+','+this.y+')'\r\n    }\r\n}\r\n// 在子类的构造函数中，只有调用 super 之后，才可以使用 this 关键字，否则报错。\r\nclass ColorPoint extends Point {\r\n    constructor(x, y, color) {\r\n        //this.color = color; // ReferenceError\r\n        super(x, y); // 调用父类的constructor(x, y)\r\n        this.color = color;\r\n    }\r\n\r\n    toString() {\r\n        return this.color + ' ' + super.toString(); // 调用父类的toString()\r\n    }\r\n}\r\n\r\nlet cp = new ColorPoint(2,5,'red');\r\nconsole.log(cp instanceof ColorPoint);  // true\r\nconsole.log(cp instanceof Point);   // true\r\n// 两条继承链。可以这样理解：\r\n// 作为一个对象，子类（B）的原型（__proto__属性）是父类（A）；\r\n// 作为一个构造函数，子类（B）的原型（prototype属性）是父类的实例。\r\nconsole.log(ColorPoint.__proto__ === Point);    // true\r\nconsole.log(ColorPoint.prototype.__proto__ === Point.prototype);    // true\r\n\r\n/**\r\n * Object.getPrototypeOf()\r\n * 从子类上获取父类。一般用于判断一个类是否继承了另一个类。\r\n * */\r\nconsole.log(Object.getPrototypeOf(ColorPoint) === Point); // true\r\n\r\n\r\n\r\n"]}